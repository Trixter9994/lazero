the attempt to make this project somewhat right, by trying to write the main file.
a terminal emulator would be just perfect for this job. BUT NOT LIMITED TO THAT THING.

we need to take control of the entire system.
replaceable module? for example, you get screenshot today from scrot, but next time you do this directly from the source code?

cannot say anything about it. this dynamic modularization is configuration-free.
so do we really need to hard-code things? I mean, what are these code for?

what does it represent?
do we need a custom complier? assembler maybe?

that history file really counts.
you want to write platform independent things? better not to try C.

better yes???
so what is your opinion on the code?

what kind of preconfiguration will make sure it has the best potential to fit the purpose of moving around?
maybe letting it to supervise itself? giving unique UUID? select those best in the best shits?

i really feel the ness of reading some source code of all kinds of operate system.
no matter it is about OS X, BSD, Windows or Linux.

what's the deal?
speaking multiple languages makes you mute?

YOU ARE IN DEEPSHIT.
OS, WINDOW MANAGER, X SERVER, TERMINAL EMULATOR, KERNEL.... ALL THE BEST SHIT....